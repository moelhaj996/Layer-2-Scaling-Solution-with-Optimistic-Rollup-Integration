version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: l2-postgres
    environment:
      POSTGRES_DB: l2scaling
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./backend/src/main/resources/db/migration:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - l2-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: l2-backend
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DATABASE_URL: jdbc:postgresql://postgres:5432/l2scaling
      DATABASE_USER: ${DB_USER:-postgres}
      DATABASE_PASSWORD: ${DB_PASSWORD:-postgres}
      L1_RPC_URL: ${L1_RPC_URL}
      L2_RPC_URL: ${L2_RPC_URL}
      L1_BRIDGE_ADDRESS: ${L1_BRIDGE_ADDRESS}
      L2_BRIDGE_ADDRESS: ${L2_BRIDGE_ADDRESS}
      L1_TOKEN_ADDRESS: ${L1_TOKEN_ADDRESS}
      L2_TOKEN_ADDRESS: ${L2_TOKEN_ADDRESS}
      PRIVATE_KEY: ${PRIVATE_KEY}
      RELAYER_ENABLED: ${RELAYER_ENABLED:-false}
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - l2-network
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: l2-frontend
    depends_on:
      - backend
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:8080
      NEXT_PUBLIC_WS_URL: ws://localhost:8080/ws
      NEXT_PUBLIC_WALLET_CONNECT_PROJECT_ID: ${WALLET_CONNECT_PROJECT_ID}
      NEXT_PUBLIC_L1_BRIDGE_ADDRESS: ${L1_BRIDGE_ADDRESS}
      NEXT_PUBLIC_L2_BRIDGE_ADDRESS: ${L2_BRIDGE_ADDRESS}
      NEXT_PUBLIC_L1_TOKEN_ADDRESS: ${L1_TOKEN_ADDRESS}
      NEXT_PUBLIC_L2_TOKEN_ADDRESS: ${L2_TOKEN_ADDRESS}
    ports:
      - "3000:3000"
    networks:
      - l2-network
    restart: unless-stopped

volumes:
  postgres-data:
    driver: local

networks:
  l2-network:
    driver: bridge
